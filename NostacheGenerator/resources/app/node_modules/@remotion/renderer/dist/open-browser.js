"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.openBrowser = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const puppeteer_core_1 = __importDefault(require("puppeteer-core"));
const remotion_1 = require("remotion");
const get_local_browser_executable_1 = require("./get-local-browser-executable");
const validRenderers = ['angle', 'egl', 'swiftshader'];
const getOpenGlRenderer = (option) => {
    const renderer = option !== null && option !== void 0 ? option : remotion_1.Internals.DEFAULT_OPENGL_RENDERER;
    remotion_1.Internals.validateOpenGlRenderer(renderer);
    return renderer;
};
const openBrowser = async (browser, options) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (browser === 'firefox' && !remotion_1.Internals.FEATURE_FLAG_FIREFOX_SUPPORT) {
        throw new TypeError('Firefox supported is not yet turned on. Stay tuned for the future.');
    }
    await (0, get_local_browser_executable_1.ensureLocalBrowser)(browser, (_a = options === null || options === void 0 ? void 0 : options.browserExecutable) !== null && _a !== void 0 ? _a : null);
    const executablePath = (0, get_local_browser_executable_1.getLocalBrowserExecutable)(browser, (_b = options === null || options === void 0 ? void 0 : options.browserExecutable) !== null && _b !== void 0 ? _b : null);
    const customGlRenderer = getOpenGlRenderer((_d = (_c = options === null || options === void 0 ? void 0 : options.chromiumOptions) === null || _c === void 0 ? void 0 : _c.gl) !== null && _d !== void 0 ? _d : null);
    const browserInstance = await puppeteer_core_1.default.launch({
        executablePath,
        product: browser,
        dumpio: (_e = options === null || options === void 0 ? void 0 : options.shouldDumpIo) !== null && _e !== void 0 ? _e : false,
        headless: (_g = (_f = options === null || options === void 0 ? void 0 : options.chromiumOptions) === null || _f === void 0 ? void 0 : _f.headless) !== null && _g !== void 0 ? _g : true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            customGlRenderer ? `--use-gl=${customGlRenderer}` : null,
            '--disable-background-media-suspend',
            process.platform === 'linux' ? '--single-process' : null,
            ((_h = options === null || options === void 0 ? void 0 : options.chromiumOptions) === null || _h === void 0 ? void 0 : _h.ignoreCertificateErrors)
                ? '--ignore-certificate-errors'
                : null,
            ...(((_j = options === null || options === void 0 ? void 0 : options.chromiumOptions) === null || _j === void 0 ? void 0 : _j.disableWebSecurity)
                ? [
                    '--disable-web-security',
                    '--user-data-dir=' +
                        (await fs_1.default.promises.mkdtemp(path_1.default.join(os_1.default.tmpdir(), 'chrome-user-dir'))),
                ]
                : []),
        ].filter(Boolean),
    });
    return browserInstance;
};
exports.openBrowser = openBrowser;
//# sourceMappingURL=open-browser.js.map