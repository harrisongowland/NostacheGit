"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenInEditor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Button_1 = require("./Button");
const initialState = { type: 'idle' };
const reducer = (state, action) => {
    if (action.type === 'start') {
        return {
            type: 'load',
        };
    }
    if (action.type === 'fail') {
        return {
            type: 'error',
        };
    }
    if (action.type === 'reset') {
        return {
            type: 'idle',
        };
    }
    if (action.type === 'succeed') {
        return {
            type: 'success',
        };
    }
    return state;
};
const OpenInEditor = ({ stack }) => {
    const isMounted = (0, react_1.useRef)(true);
    const [state, dispatch] = (0, react_1.useReducer)(reducer, initialState);
    const dispatchIfMounted = (0, react_1.useCallback)((payload) => {
        if (isMounted.current === false)
            return;
        dispatch(payload);
    }, []);
    const openInBrowser = (0, react_1.useCallback)(() => {
        dispatch({ type: 'start' });
        // eslint-disable-next-line promise/catch-or-return
        fetch(`/api/open-in-editor`, {
            method: 'post',
            headers: {
                'content-type': 'application/json',
            },
            body: JSON.stringify({
                stack,
            }),
        })
            .then((res) => res.json())
            .then((data) => {
            if (data.success) {
                dispatchIfMounted({ type: 'succeed' });
            }
            else {
                dispatchIfMounted({ type: 'fail' });
            }
        })
            .catch((err) => {
            dispatchIfMounted({ type: 'fail' });
            console.log('Could not open browser', err);
        })
            .finally(() => {
            setTimeout(() => {
                dispatchIfMounted({ type: 'reset' });
            }, 2000);
        });
    }, [dispatchIfMounted, stack]);
    (0, react_1.useEffect)(() => {
        return () => {
            isMounted.current = false;
        };
    }, []);
    const label = (0, react_1.useMemo)(() => {
        switch (state.type) {
            case 'error':
                return 'Failed to open';
            case 'idle':
                return `Open in ${window.remotion_editorName}`;
            case 'success':
                return `Opened in ${window.remotion_editorName}`;
            case 'load':
                return `Opening...`;
            default:
                throw new Error('invalid state');
        }
    }, [state.type]);
    return ((0, jsx_runtime_1.jsx)(Button_1.Button, { onClick: openInBrowser, disabled: state.type !== 'idle', children: label }, void 0));
};
exports.OpenInEditor = OpenInEditor;
//# sourceMappingURL=OpenInEditor.js.map