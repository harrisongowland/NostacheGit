"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const express_1 = __importDefault(require("express"));
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const remotion_1 = require("remotion");
const webpack_1 = __importDefault(require("webpack"));
const get_port_1 = require("./get-port");
const project_info_1 = require("./project-info");
const update_available_1 = require("./update-available");
const webpack_config_1 = require("./webpack-config");
const crypto_1 = __importDefault(require("crypto"));
const static_preview_1 = require("./static-preview");
const open_in_editor_1 = require("./error-overlay/react-overlay/utils/open-in-editor");
const hot_middleware_1 = require("./hot-middleware");
const dev_middleware_1 = require("./dev-middleware");
const get_file_source_1 = require("./error-overlay/react-overlay/utils/get-file-source");
const startServer = async (entry, userDefinedComponent, options) => {
    var _a, _b, _c, _d, _e;
    const app = (0, express_1.default)();
    const editorGuess = (0, open_in_editor_1.guessEditor)();
    const tmpDir = await fs_1.default.promises.mkdtemp(path_1.default.join(os_1.default.tmpdir(), 'react-motion-graphics'));
    const config = (0, webpack_config_1.webpackConfig)({
        entry,
        userDefinedComponent,
        outDir: tmpDir,
        environment: 'development',
        webpackOverride: (_a = options === null || options === void 0 ? void 0 : options.webpackOverride) !== null && _a !== void 0 ? _a : remotion_1.Internals.getWebpackOverrideFn(),
        inputProps: (_b = options === null || options === void 0 ? void 0 : options.inputProps) !== null && _b !== void 0 ? _b : {},
        envVariables: (_c = options === null || options === void 0 ? void 0 : options.envVariables) !== null && _c !== void 0 ? _c : {},
        maxTimelineTracks: (_d = options === null || options === void 0 ? void 0 : options.maxTimelineTracks) !== null && _d !== void 0 ? _d : 15,
    });
    const compiler = (0, webpack_1.default)(config);
    const hash = `/static-${crypto_1.default.randomBytes(6).toString('hex')}`;
    app.use(hash, express_1.default.static(path_1.default.join(process.cwd(), 'public')));
    app.use((0, dev_middleware_1.wdm)(compiler));
    app.use((0, hot_middleware_1.webpackHotMiddleware)(compiler));
    app.get('/api/update', (req, res) => {
        (0, update_available_1.isUpdateAvailableWithTimeout)()
            .then((data) => {
            res.json(data);
        })
            .catch((err) => {
            res.status(500).json({
                err: err.message,
            });
        });
    });
    app.get('/api/project-info', (req, res) => {
        (0, project_info_1.getProjectInfo)()
            .then((data) => {
            res.json(data);
        })
            .catch((err) => {
            res.status(500).json({
                err: err.message,
            });
        });
    });
    app.get('/api/file-source', (req, res) => {
        const { f } = req.query;
        if (typeof f !== 'string') {
            throw new Error('must pass `f` parameter');
        }
        (0, get_file_source_1.getFileSource)(decodeURIComponent(f))
            .then((data) => {
            res.write(data);
            return res.end();
        })
            .catch((err) => {
            res.status(500).json({
                err: err.message,
            });
        });
    });
    app.use(express_1.default.json());
    app.post('/api/open-in-editor', async (req, res) => {
        try {
            const body = req.body;
            if (!('stack' in body)) {
                throw new TypeError('Need to pass stack');
            }
            const stack = body.stack;
            const guess = await editorGuess;
            const didOpen = await (0, open_in_editor_1.launchEditor)({
                colNumber: stack.originalColumnNumber,
                editor: guess[0],
                fileName: path_1.default.resolve(process.cwd(), stack.originalFileName),
                lineNumber: stack.originalLineNumber,
                vsCodeNewWindow: false,
            });
            res.json({
                success: didOpen,
            });
        }
        catch (err) {
            res.json({
                success: false,
            });
        }
    });
    app.use('favicon.png', (req, res) => {
        res.sendFile(path_1.default.join(__dirname, '..', 'web', 'favicon.png'));
    });
    const edit = await editorGuess;
    const displayName = (0, open_in_editor_1.getDisplayNameForEditor)(edit[0]);
    app.use('*', (_, res) => {
        res.set('content-type', 'text/html');
        res.end((0, static_preview_1.indexHtml)(hash, displayName));
    });
    const desiredPort = (_e = options === null || options === void 0 ? void 0 : options.port) !== null && _e !== void 0 ? _e : remotion_1.Internals.getServerPort();
    const port = await (0, get_port_1.getDesiredPort)(desiredPort, 3000, 3100);
    app.listen(port);
    return port;
};
exports.startServer = startServer;
//# sourceMappingURL=start-server.js.map